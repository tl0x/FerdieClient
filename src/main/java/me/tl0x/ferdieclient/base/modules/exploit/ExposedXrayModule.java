package me.tl0x.ferdieclient.base.modules.exploit;

import me.tl0x.ferdieclient.FerdieClient;
import me.tl0x.ferdieclient.base.Module;
import me.tl0x.ferdieclient.base.modules.ModuleType;
import me.tl0x.ferdieclient.helpers.render.Renderer;
import net.minecraft.block.AirBlock;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.block.OreBlock;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Position;
import net.minecraft.util.math.Vec3d;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;

import static net.minecraft.block.Blocks.*;

public class ExposedXrayModule extends Module {

    List<BlockPos> blockPoslst = new ArrayList<>();

    public ExposedXrayModule() {
        super("ExposedXray", "Outlines blocks that are surrounded by 1 block of air. Useful against antiantixray. May cause lag on lower-end computers.");
        this.setModuleType(ModuleType.MODULETYPE_EXPLOIT);
    }

    public Block returnBlockfromPos(BlockPos block) {
        return FerdieClient.client.world.getBlockState(block).getBlock();
    }

    public boolean bordersAir(BlockPos block) {
        int x = (int) block.getX();
        int y = (int) block.getY();
        int z = (int) block.getZ();

        BlockPos b1 = new BlockPos(x+1,y,z);
        BlockPos b2 = new BlockPos(x-1,y,z);
        BlockPos b3 = new BlockPos(x,y-1,z);
        BlockPos b4 = new BlockPos(x,y+1,z);
        BlockPos b5 = new BlockPos(x, y, z-1);
        BlockPos b6 = new BlockPos(x, y, z+1);

        if (returnBlockfromPos(b1) instanceof AirBlock || returnBlockfromPos(b2) instanceof AirBlock || returnBlockfromPos(b3) instanceof AirBlock || returnBlockfromPos(b4) instanceof AirBlock || returnBlockfromPos(b5) instanceof AirBlock || returnBlockfromPos(b6) instanceof AirBlock)   {
            return true;
        }

        return false;
    }

    public boolean isValid(Block b) {
        return b == DIAMOND_ORE || b == LAPIS_ORE || b == GOLD_ORE || b == DEEPSLATE_DIAMOND_ORE || b == DEEPSLATE_LAPIS_ORE || b == DEEPSLATE_GOLD_ORE;
    }

    @Override
    public void onRender(MatrixStack matrices, float tickDelta) {
        BlockPos pos = FerdieClient.client.player.getBlockPos();
        Position playerPos = FerdieClient.client.player.getPos();
        for(int x = (int) pos.getX()-30; x < (int) pos.getX()+30; x++) {
            for (int y = (int) pos.getY()-30; y < (int) pos.getY()+20; y++) {
                for (int z = (int) pos.getZ()-30; z < (int) pos.getZ()+30; z++) {
                    BlockPos temp = new BlockPos(x, y, z);
                    Block block = returnBlockfromPos(temp);
                    if (isValid(block)) {
                        if (bordersAir(temp)) {
                            if (block == DIAMOND_ORE || block == DEEPSLATE_DIAMOND_ORE) Renderer.renderOutline(new Vec3d(temp.getX(), temp.getY(), temp.getZ()), new Vec3d(1, 1, 1), Color.CYAN, matrices);
                            if (block == LAPIS_ORE || block == DEEPSLATE_LAPIS_ORE) Renderer.renderOutline(new Vec3d(temp.getX(), temp.getY(), temp.getZ()), new Vec3d(1, 1, 1), Color.BLUE, matrices);
                            if (block == GOLD_ORE || block == DEEPSLATE_GOLD_ORE) Renderer.renderOutline(new Vec3d(temp.getX(), temp.getY(), temp.getZ()), new Vec3d(1, 1, 1), Color.YELLOW, matrices);
                        }
                    }
                }
            }
        }
        super.onRender(matrices, tickDelta);
    }
}
